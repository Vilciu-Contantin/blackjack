############### Proiectul Blackjack #####################

#Dificultate Normal캒 游땙: Folosi탵i toate sfaturile de mai jos pentru a finaliza proiectul.
#Dificultate Grea 游뱂: Folosi탵i doar Sugestiile 1, 2, 3 pentru a finaliza proiectul.
#Dificultate Extra Grea 游땴: Folosi탵i doar Sfaturile 1 탳i 2 pentru a finaliza proiectul.
#Expert 칥n dificultate 游뱚: Folosi탵i doar Sugestia 1 pentru a finaliza proiectul.

############### Regulile casei noastre de Blackjack #####################

## Puntea are dimensiuni nelimitate.
## Nu exist캒 glume탵i.
## Jack/Regina/Regele conteaz캒 to탵i ca 10.
## Asul poate conta ca 11 sau 1.
## Folosi탵i urm캒toarea list캒 ca pachet de c캒r탵i:
## c캒r탵i = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
## C캒r탵ile din list캒 au probabilitatea egal캒 de a fi extrase.
## C캒r탵ile nu sunt scoase din pachet pe m캒sur캒 ce sunt extrase.

#################### Sugestii ####################

#Sfat 1: Accesa탵i acest site web 탳i 칥ncerca탵i jocul Blackjack:
# https://games.washingtonpost.com/games/blackjack/
#Atunci, 칥ncerca탵i aici proiectul Blackjack finalizat:
# http://blackjack-final.appbrewery.repl.run

#Sfat 2: Citi탵i aceast캒 detaliere a cerin탵elor programului:
# http://listmoz.com/view/6h34DJpvJBFVRlZfJvxF
#Apoi 칥ncerca탵i s캒 v캒 crea탵i propria diagram캒 de flux pentru program.

#Sfat 3: Desc캒rca탵i 탳i citi탵i aceast캒 diagram캒 de flux pe care am creat-o:
# https://drive.google.com/uc?export=download&id=1rDkiHCrhaf9eX7u7yjM1qwSuyEk-rPnt

# Sfat 4: Crea탵i o func탵ie deal_card() care utilizeaz캒 Lista de mai jos pentru a *a returna* o carte aleatorie.
#11 este Asul.

import random
from replit import clear
from art import logo

def deal_card():
  """Returns a random card from the deck."""
  cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
  card = random.choice(cards)
  return card

# Sfat 6: Crea탵i o func탵ie numit캒 calculate_score() care ia o list캒 de c캒r탵i ca intrare
#탳i returneaz캒 scorul.
#C캒uta탵i func탵ia sum() pentru a v캒 ajuta s캒 face탵i acest lucru.
def calculate_score(cards):
  """Take a list of cards and return the score calculated from the cards"""
  
# Sfat 7: 칉n interiorul calculate_score() verific캒 un blackjack (o m칙n캒 cu doar 2 c캒r탵i: as + 10) 탳i returneaz캒 0 칥n loc de scorul real. 0 va reprezenta un blackjack 칥n jocul nostru.
  if sum(cards) == 21 and len(cards) == 2:
    return 0
# Sugestie 8: 칉n interiorul calculate_score() verifica탵i pentru un 11 (as). Dac캒 scorul este deja peste 21, elimina탵i 11 탳i 칥nlocui탵i-l cu 1. Poate fi necesar s캒 c캒uta탵i append() 탳i remove().
  if 11 in cards and sum(cards) > 21:
    cards.remove(11)
    cards.append(1)
  return sum(cards)
  

# Sfat 13: Crea탵i o func탵ie numit캒 compare() 탳i introduce탵i scorul_utilizator 탳i scorul_calculator. Dac캒 computerul 탳i utilizatorul au acela탳i scor, atunci este egal. Dac캒 computerul are un blackjack (0), atunci utilizatorul pierde. Dac캒 utilizatorul are un blackjack (0), atunci utilizatorul c칙탳tig캒. Dac캒 user_score este peste 21, atunci utilizatorul pierde. Dac캒 computer_score este peste 21, atunci computerul pierde. Dac캒 niciuna dintre cele de mai sus, atunci juc캒torul cu cel mai mare scor c칙탳tig캒.
def compare(user_score, computer_score):

#Rezolvarea unei erori. Dac캒 tu 탳i computerul sunte탵i termina탵i, pierde탵i.
  if user_score > 21 and computer_score > 21:
    return "You went over. You lose 游땫"
    
    
  if user_score == computer_score:
    return "Draw 游뗶"
  elif computer_score == 0:
    return "Lose, opponent has Blackjack 游땸"
  elif user_score == 0:
    return "Win with a Blackjack 游땙"
  elif user_score > 21:
    return "You went over. You lose 游땴"
  elif computer_score > 21:
    return "Opponent went over. You win 游때"
  elif user_score > computer_score:
    return "You win 游땎"
  else:
    return "You lose 游땫"
  
def play_game():
  
  print(logo)
  
# Sfat 5: 칉mp캒r탵i탵i utilizatorului 탳i computerului c칙te 2 c캒r탵i folosind deal_card()
  user_cards = []
  computer_cards = []
  is_game_over = False
  
  for _ in range(2):
    user_cards.append(deal_card())
    computer_cards.append(deal_card())
    
# Sfat 11: Scorul va trebui verificat din nou cu fiecare carte nou캒 extras캒, iar verific캒rile din Sfatul 9 trebuie repetate p칙n캒 la sf칙r탳itul jocului.
  
  while not is_game_over:
   
# Sfat 9: Apela탵i calculate_score(). Dac캒 computerul sau utilizatorul are un blackjack (0) sau dac캒 scorul utilizatorului este peste 21, atunci jocul se termin캒.
    user_score = calculate_score(user_cards)
    computer_score = calculate_score(computer_cards)
    print(f"   Your cards: {user_cards}, current score: {user_score}")
    print(f"   Computer's first card: {computer_cards[0]}")
    
    if user_score == 0 or computer_score == 0 or user_score > 21:
      is_game_over = True
    else:
      
# Sugestie 10: Dac캒 jocul nu s-a 칥ncheiat, 칥ntreab캒 utilizatorul dac캒 vrea s캒 trag캒 o alt캒 carte. Dac캒 da, atunci utiliza탵i func탵ia deal_card() pentru a ad캒uga un alt card la lista user_cards. Dac캒 nu, atunci jocul s-a 칥ncheiat.
      user_should_deal = input("Type 'y' to get another card, type 'n' to pass: ")
      if user_should_deal == "y":
        user_cards.append(deal_card())
      else:
        is_game_over = True
    
  # Sfat 12: Odat캒 ce utilizatorul a terminat, este timpul s캒 l캒sa탵i computerul s캒 se joace. Calculatorul ar trebui s캒 continue s캒 deseneze c캒r탵i at칙ta timp c칙t are un scor mai mic de 17.
  while computer_score != 0 and computer_score < 17:
    computer_cards.append(deal_card())
    computer_score = calculate_score(computer_cards)
    
  print(f"   Your final hand: {user_cards}, final score: {user_score}")
  print(f"   Computer's final hand: {computer_cards}, final score: {computer_score}")
  print(compare(user_score, computer_score))
  
#Sfat 14: 칉ntreba탵i utilizatorul dac캒 dore탳te s캒 reporneasc캒 jocul. Dac캒 r캒spund da, 탳terge consola 탳i 칥ncepe un nou joc de blackjack 탳i arat캒 sigla de pe art.py.
while input("Do you want to play a game of Blackjack? Type 'y' or 'n': ") == "y":
  clear()
  play_game()